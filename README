Thge project consists of an application on AWS EC2 developed using Spring Boot and Python that processes requests and auto-scales to provide a fast and efficient image recognition service using a deep learning model.
The Web Tier consists of a Spring Application and the App Tier Consists of a Python Application.

Componenets

a. Web Tier
A tomcat server that receives (listens) incoming post requests from users to upload photos makes up the web-tier. The server keeps the photos in SQS queues as input and puts them in S3 buckets as input for app-tier processing. Web-tier scales out the app-tier instances (maximum of 19) for quicker processing of the requests/images when the number of pictures
(msgs) in the sqs queue rises. In order to receive the results of image recognition, the Web-tier also polls the SQS queue (output) and provides the appropriate response. Each request is processed by the web-tier using multithreading, which spawns new threads and creates new instances of the app-tier.

b. App Tier
Image recognition in images is the responsibility of the App Tier. The web tier initiates the app tier to handle the input queue's images. As soon as the App Tier is launched, it polls a name from the input queue for an image. Additionally, the actual image is downloaded from the input S3 bucket. The face recognition python script is then invoked for the image to receive the categorization, and the face recognition task is completed. Once the classification is complete, the output S3 bucket stores the name of the input image and the classification result as a key value pair. Additionally, the output queue receives the input image and categorization for consumption. Finally, the app tier performs scaling down if it discovers any further photos in the queue. If not, it repeats the process above.

c. AWS EC2
The App Tier and Web Tier of the application are hosted by the EC2 instance. The app-tier is in charge of processing the queued image names and download the corresponding images form input bucket at S3 to produce the recognition results for the images. Additionally, in the context of the web tier, it is accountable for listening to incoming classification request and sending it to the input queue, processing the request, managing app tier scaling, and returning the classification output by polling the response queue. The main service for this application and functionality is provided by this AWS service.

d. AWS SQS
A distributed queue offered by AWS services is called SQS, or Simple Queue Service. We are employing the FIFO SQS queue for this project. The order is upheld and a single request is processed by the FIFO SQS queue. In this project, we're using two FIFO SQS queues. The input queue, or queue of input (request) images, is the first. The Web Tier populates this. The classification result is stored in the second queue which is the response/output queue and is consumed by the web layer after being filled by the app tier.

e. AWS S3
The AWS S3 or Simple Storage Service is a key-value store. It is used at two places in the project. The first S3 bucket (input bucket) is responsible for holding the image file name and the actual file. This is the place from where the app tier downloads the image for classification. Finally, the second S3 bucket (output bucket) holds the image name and classification result pair.

# Web Tier's URL
WEBTIER EC2 IP: ec2-44-202-237-157.compute-1.amazonaws.com (44.202.237.157) (Might Change).
WEBTIER APPLICATION URL: http://ec2-44-202-237-157.compute-1.amazonaws.com:8080/recognizeImage

# AWS Credentials
PLEASE FIND FILE rootkey.csv in directory.

# PEM Key
PLEASE FIND FILE CC-Class.pem in directory.

# EIP <NOT PURCHASED>

# SQS names:
1. input-queue-alpha.fifo
2. output-queue-alpha.fifo

# S3 bucket names:
1. input-bucket-alpha
2. output-bucket-alpha



